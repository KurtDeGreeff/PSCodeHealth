{
    "Invoke-ScriptAnalyzer": [
        {
            "1Result_PSProvideCommentHelp": {
                "RuleName": "PSProvideCommentHelp",
                    "Extent": {
                        "Text": "BadFunction"
                    }
            }
        },
        {
            "2Results_2Rules": [
                {
                    "RuleName": "PSProvideCommentHelp",
                        "Extent": {
                            "Text": "VeryBadFunction"
                        }
                },
                {
                    "RuleName": "PSAvoidGlobalVars",
                        "Extent": {
                            "Text": "VeryBadFunction"
                        }
                }
            ]
        }
    ],
    "Get-FunctionDefinition": [
        {
            "IfStatements": {
                "Extent": {
                    "Text": [
                        "Function Test-Conditional",
                        "{",
                        "    [CmdletBinding()]",
                        "    Param(",
                        "        [int]$IfElseif",
                        "    )",
                        "",
                        "    # Testing If/ElseIf conditional statement",
                        "    If ( $IfElseif -eq 10 ) {",
                        "        Write-Host 'IfElseif is 10'",
                        "    }",
                        "    ElseIf ( $IfElseif -eq 11 ) {",
                        "        Write-Host 'IfElseif is 11'",
                        "    }",
                        "    ElseIf ( $IfElseif -eq 12 ) {",
                        "        Write-Host 'IfElseif is 12'",
                        "    }",
                        "    Else {",
                        "        Write-Host 'IfElseif is different'",
                        "    }",
                        "",
                        "    # Testing nested If statement",
                        "    If ( $IfElseif -gt 20 ) {",
                        "        If ( $IfElseif -gt 40 ) {",
                        "            Write-Host 'IfElseif is between 20 and 40'",
                        "        }",
                        "        Else {",
                        "            Write-Host 'IfElseif is greater than 40'",
                        "        }",
                        "    }",
                        "    Else {",
                        "        If ( $IfElseif -ge 10 ) {",
                        "            Write-Host 'IfElseif is a 2 digit number'",
                        "        }",
                        "        Else {",
                        "            Write-Host 'IfElseif is a 1 digit number'",
                        "        }",
                        "    }",
                        "}"
                    ]
                }
            }
        },
        {
            "NoIfStatements": {
                "Extent": {
                    "Text": [
                        "Function Test-Conditional",
                        "{",
                        "    [CmdletBinding()]",
                        "    Param(",
                        "        [int]$IfElseif",
                        "    )",
                        "",
                        "    Write-Host 'There is no If nor is there any ElseIf'",
                        "}"
                    ]
                }
            }
        },
        {
            "NoSwitchStatements": {
                "Extent": {
                    "Text": [
                        "Function Test-Conditional",
                        "{",
                        "    [CmdletBinding()]",
                        "    Param(",
                        "        [int]$Switch",
                        "    )",
                        "",
                        "    Write-Host 'There is no Switch Statement'",
                        "}"
                    ]
                }
            }
        },
        {
            "SwitchStatements": {
                "Extent": {
                    "Text": [
                        "Function Test-Conditional",
                        "{",
                        "    [CmdletBinding()]",
                        "    Param(",
                        "        [int]$Switch",
                        "    )",
                        "",
                        "    Switch ($Switch)",
                        "    {",
                        "        10 {",
                        "            Write-Host 'IfElseif is 10'",
                        "            Break",
                        "        }",
                        "        11 {",
                        "            Write-Host 'IfElseif is 11'",
                        "            Break",
                        "        }",
                        "        12 {",
                        "            Write-Host 'IfElseif is 12'",
                        "            Break",
                        "        }",
                        "        Default {",
                        "            Write-Host 'Switch is different'",
                        "        }",
                        "    }",
                        "}"
                    ]
                }
            }
        },
        {
            "NoLogicalOp": {
                "Extent": {
                    "Text": [
                        "Function Test-Conditional",
                        "{",
                        "    [CmdletBinding()]",
                        "    Param(",
                        "        [int]$LogicalOp",
                        "    )",
                        "",
                        "    Write-Host 'There is no logical operator'",
                        "}"
                    ]
                }
            }
        },
        {
            "LogicalOps": {
                "Extent": {
                    "Text": [
                        "Function Test-Conditional",
                        "{",
                        "    [CmdletBinding()]",
                        "    Param(",
                        "        [int]$LogicalOp,",
                        "        [int]$LogicalOp2",
                        "    )",
                        "    # Testing Logical operators",
                        "    If ( $LogicalOp -gt 10 -and $LogicalOp2 -gt 10 ) {",
                        "        Write-Host 'Both are greater to 10'",
                        "    }",
                        "    If ( $LogicalOp -gt 10 -or $LogicalOp2 -gt 10 ) {",
                        "        Write-Host 'At least one is greater than 10'",
                        "    }",
                        "    If ( $LogicalOp -gt 10 -xor $LogicalOp2 -gt 10 ) {",
                        "        Write-Host 'Only one is greater than 10'",
                        "    }",
                        "}"
                    ]
                }
            }
        },
        {
            "NoTrapOrCatch": {
                "Extent": {
                    "Text": [
                        "Function Test-Conditional",
                        "{",
                        "    [CmdletBinding()]",
                        "    Param(",
                        "        [int]$Trap",
                        "    )",
                        "",
                        "    Write-Host 'There is no Trap statement or Catch clause'",
                        "}"
                    ]
                }
            }
        },
        {
            "TrapAndCatch": {
                "Extent": {
                    "Text": [
                        "Function Test-Conditional",
                        "{",
                        "    [CmdletBinding()]",
                        "    Param(",
                        "        [int]$Trap,",
                        "        [int]$Catch",
                        "    )",
                        "    #Testing Trap statements and Catch clauses in Try statements",
                        "    Try {",
                        "        $Catch | Out-String -ErrorAction Stop",
                        "    }",
                        "    Catch [System.OutOfMemoryException] {",
                        "        Try {",
                        "            Restart-Computer -Force",
                        "        }",
                        "        Catch {",
                        "            Write-Error 'Please, kill me !'",
                        "        }",
                        "    }",
                        "    Catch [System.NullReferenceException] {",
                        "        Write-Warning '$Catch was Null'",
                        "    }",
                        "    Catch {",
                        "        Write-Error $_.Exception.Message",
                        "    }",
                        "    Trap {",
                        "        Write-Warning 'Trapped exception'",
                        "    }",
                        "    $Trap | Out-String -ErrorAction Stop",
                        "}"
                    ]
                }
            }
        },
        {
            "NoForStatement": {
                "Extent": {
                    "Text": [
                        "Function Test-Conditional",
                        "{",
                        "    [CmdletBinding()]",
                        "    Param(",
                        "        [int]$For",
                        "    )",
                        "",
                        "    Write-Host 'There is no For statement'",
                        "}"
                    ]
                }
            }
        },
        {
            "ForStatements": {
                "Extent": {
                    "Text": [
                        "Function Test-For {",
                        "    [CmdletBinding()]",
                        "    Param(",
                        "        [int]$For,",
                        "        ",
                        "        [int]$For2",
                        "    )",
                        "    #Testing For statements",
                        "    For ($i = 1; $i -lt 99; $i++) {",
                        "        Write-Host \"$($For + $i)\"",
                        "       ",
                        "        For ($j = 0; $j -lt 10; $j++) {",
                        "            Write-Host \"$($For2 - $j)\"",
                        "        }",
                        "    }",
                        "    For ($k = 1;;$k++) {",
                        "        Write-Host 'No Condition for this loop'",
                        "    }",
                        "}"
                    ]
                }
            }
        },
        {
            "NoWhileStatement": {
                "Extent": {
                    "Text": [
                        "Function Test-Conditional",
                        "{",
                        "    [CmdletBinding()]",
                        "    Param(",
                        "        [int]$While",
                        "    )",
                        "",
                        "    Write-Host 'There is no While statement'",
                        "}"
                    ]
                }
            }
        },
        {
            "WhileStatements": {
                "Extent": {
                    "Text": [
                        "Function Test-While {",
                        "    [CmdletBinding()]",
                        "    Param(",
                        "        [int]$While,",
                        "       ",
                        "        [int]$While2",
                        "    )",
                        "    #Testing While statements",
                        "    While ($While -lt 99) {",
                        "        Write-Host 'While is less than 99'",
                        "        $While++",
                        "       ",
                        "        While ($While2 -lt 10) {",
                        "            Write-Host 'While2 is less than 10'",
                        "            $While2++",
                        "        }",
                        "    }",
                        "}"
                    ]
                }
            }
        },
        {
            "NoBranching": {
                "Extent": {
                    "Text": [
                        "Function Test-Conditional",
                        "{",
                        "    [CmdletBinding()]",
                        "    Param(",
                        "        [int]$While",
                        "    )",
                        "",
                        "    Write-Host 'There is no branching statement'",
                        "}"
                    ]
                }
            }
        },
        {
            "MultipleBranchings": {
                "Extent": {
                    "Text": [
                        "Function Test-Conditional",
                        "{",
                        "    [CmdletBinding()]",
                        "    Param(",
                        "        [int]$While",
                        "    )",
                        "",
                        "# Testing While statements",
                        "While ($While -lt 99) {",
                        "    Write-Host 'While is less than 99'",
                        "    $While++",
                        "",
                        "    While ($While2 -lt 10) {",
                        "        Write-Host 'While2 is less than 10'",
                        "        $While2++",
                        "    }",
                        "}",
                        "While ( 'I am always true' ) {",
                        "    Write-Host 'This is true'",
                        "}",
                        "# Testing If/ElseIf conditional statement",
                        "If ( $IfElseif -eq 10 ) {",
                        "    Write-Host 'IfElseif is 10'",
                        "}",
                        "ElseIf ( $IfElseif -eq 11 ) {",
                        "    Write-Host 'IfElseif is 11'",
                        "}",
                        "ElseIf ( $IfElseif -eq 12 ) {",
                        "    Write-Host 'IfElseif is 12'",
                        "}",
                        "Else {",
                        "    Write-Host 'IfElseif is different'",
                        "}",
                        "",
                        "# Testing nested If statement",
                        "If ( $IfElseif -gt 20 ) {",
                        "    If ( $IfElseif -gt 40 ) {",
                        "        Write-Host 'IfElseif is between 20 and 40'",
                        "    }",
                        "    Else {",
                        "        Write-Host 'IfElseif is greater than 40'",
                        "    }",
                        "}",
                        "Else {",
                        "    If ( $IfElseif -ge 10 ) {",
                        "        Write-Host 'IfElseif is a 2 digit number'",
                        "    }",
                        "    Else {",
                        "        Write-Host 'IfElseif is a 1 digit number'",
                        "    }",
                        "}",
                        "# Testing Logical operators",
                        "If ( $LogicalOp -gt 10 -and $LogicalOp2 -gt 10 ) {",
                        "    Write-Host 'Both are greater to 10'",
                        "}",
                        "If ( $LogicalOp -gt 10 -or $LogicalOp2 -gt 10 ) {",
                        "    Write-Host 'At least one is greater than 10'",
                        "}",
                        "If ( $LogicalOp -gt 10 -xor $LogicalOp2 -gt 10 ) {",
                        "    Write-Host 'Only one is greater than 10'",
                        "}",
                        "# Testing Trap statements and Catch clauses in Try statements",
                        "Try {",
                        "    $Catch | Out-String -ErrorAction Stop",
                        "}",
                        "Catch [System.OutOfMemoryException] {",
                        "    Try {",
                        "        Restart-Computer -Force",
                        "    }",
                        "    Catch {",
                        "        Write-Error 'Please, kill me !'",
                        "    }",
                        "}",
                        "Catch [System.NullReferenceException] {",
                        "    Write-Warning '$Catch was Null'",
                        "}",
                        "Catch {",
                        "    Write-Error $_.Exception.Message",
                        "   }",
                        "}"
                    ]
                }
            }
        }
    ],
    "Invoke-Pester": [
        {
            "1CommandAnalyzed": {
                "CodeCoverage": {
                    "NumberOfCommandsAnalyzed": 1,
                    "NumberOfCommandsExecuted": 0
                }
            }
        },
        {
            "0CommandAnalyzed": {
                "CodeCoverage": {
                    "NumberOfCommandsAnalyzed": 0,
                    "NumberOfCommandsExecuted": 1
                }
            }
        }
    ]
}